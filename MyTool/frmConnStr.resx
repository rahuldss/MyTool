<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="txtConnStr.Locked" type="System.Boolean, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <data name="txtConnStr.Text" xml:space="preserve">
    <value>**************MSACCESS******************
ODBC 

Standard Security:

"Driver={Microsoft Access Driver (*.mdb)};
Dbq=C:\mydatabase.mdb;
Uid=Admin;
Pwd=;" 


Workgroup:

"Driver={Microsoft Access Driver (*.mdb)};
Dbq=C:\mydatabase.mdb;
SystemDB=C:\mydatabase.mdw;" 


Exclusive:

"Driver={Microsoft Access Driver (*.mdb)};
Dbq=C:\mydatabase.mdb;
Exclusive=1;Uid=admin;
Pwd=" 

 

OleDbConnection (.NET) 


Standard security:

"Provider=Microsoft.Jet.OLEDB.4.0;
Data Source=\somepath\mydb.mdb;
User Id=admin;Password=;" 


Workgroup (system database):

"Provider=Microsoft.Jet.OLEDB.4.0;
Data Source=\somepath\mydb.mdb;
Jet OLEDB:System Database=system.mdw;" 

 

With password:

"Provider=Microsoft.Jet.OLEDB.4.0;
Data Source=\somepath\mydb.mdb;
Jet OLEDB:Database Password=MyDbPassword;" 


******************SQL2000*******************

ODBC

Standard Security:

"Driver={SQL Server};Server=UrServerName;

Database=pubs;

Uid=myUsername;

Pwd=myPassword;" 

 

Trusted connection:

"Driver={SQL Server};

Server=UrServerName;

Database=pubs;

Trusted_Connection=yes;" 

 

Prompt for username and password:

oConn.Properties("Prompt") = adPromptAlways
oConn.Open "Driver={SQL Server};

Server=UrServerName;DataBase=pubs;" 

 

OLE DB, OleDbConnection (.NET)

Standard Security:

"Provider=sqloledb;

Data Source=UrServerName;

Initial Catalog=pubs;

User Id=myUsername;

Password=myPassword;" 

 

Trusted Connection:

"Provider=sqloledb;

Data Source=UrServerName;

Initial Catalog=pubs;

Integrated Security=SSPI;" 

(use serverName\instanceName as Data Source to use 

an specifik SQLServer instance, only SQLServer2000)

 

Prompt for username and password:

oConn.Provider = "sqloledb"
oConn.Properties("Prompt") = adPromptAlways
oConn.Open "Data Source=UrServerName;

Initial Catalog=pubs;" 

 

Connect via an IP address:

"Provider=sqloledb;

Data Source=190.190.200.100,1433;

Network Library=DBMSSOCN;

Initial Catalog=pubs;

User ID=myUsername;

Password=myPassword;" 

 

(DBMSSOCN=TCP/IP instead of Named Pipes, at the end 

of the Data Source is the port to use (1433 is the default))

 

SqlConnection (.NET)

Standard Security:

"Data Source=UrServerName;

Initial Catalog=pubs;

User Id=myUsername;

Password=myPassword;" 
   

OR

 

"Server=UrServerName;

Database=pubs;

User ID=myUsername;

Password=myPassword;

Trusted_Connection=False" 


(both connection strings produces the same result 

 

Trusted Connection:

"Data Source=UrServerName;

Initial Catalog=pubs;

Integrated Security=SSPI;" 


 OR


"Server=UrServerName;

Database=pubs;

Trusted_Connection=True;" 
   

(both connection strings produces the same result)

 

 (use serverName\instanceName as Data Source to use an 

specific SQLServer instance, only SQLServer2000)

 

Connect via an IP address:

"Data Source=190.190.200.100,1433;

Network Library=DBMSSOCN;

Initial Catalog=pubs;

User ID=myUsername;

Password=myPassword;" 

 

(DBMSSOCN=TCP/IP instead of Named Pipes, at the end of the 

Data Source is the port to use (1433 is the default))

 

Declare the SqlConnection:

 

C#:
using System.Data.SqlClient;
SqlConnection oSQLConn = new SqlConnection();
oSQLConn.ConnectionString="my connection string";
oSQLConn.Open(); 

 

VB.NET:
Imports System.Data.SqlClient
Dim oSQLConn As SqlConnection = New SqlConnection()
oSQLConn.ConnectionString="my connection string"
oSQLConn.Open() 

 

Data Shape

 

MS Data Shape
"Provider=MSDataShape;

Data Provider=SQLOLEDB;

Data Source=UrServerName;

Initial Catalog=pubs;

User ID=myUsername;

Password=myPassword;"

**************SQL 2005*****************
SQL Native Client ODBC Driver 


Standard security:

"Driver={SQL Native Client};
Server=MyServerName;
Database=pubs;
UID=myUsername;
PWD=myPassword;" 

Trusted connection:

"Driver={SQL Native Client};
Server=MyServerName;
Database=pubs;
Trusted_Connection=yes;" 

Note: Integrated Security=SSPI equals 
Trusted_Connection=yes

Prompt for username and password:

oConn.Properties("Prompt") = adPromptAlways
oConn.Open "Driver={SQL Native Client};
Server=Aron1;DataBase=pubs;" 

 

Enabling MARS (multiple active result sets):

"Driver={SQL Native Client};
Server=UrServerName;
Database=pubs;
Trusted_Connection=yes;
MARS_Connection=yes" 

Note: MultipleActiveResultSets=true equals 
MARS_Connection=yes

 

Encrypt data sent over network:

"Driver={SQL Native Client};
Server=UrServerName;
Database=pubs;
Trusted_Connection=yes;
Encrypt=yes" 

 

Attach a database file on connect to a local
SQL Server Express instance:

"Driver={SQL Native Client};Server=.\SQLExpress;
AttachDbFilename=c:\asd\qwe\mydbfile.mdf;
Database=dbname;Trusted_Connection=Yes;" 

OR

"Driver={SQL Native Client};
Server=.\SQLExpress;
AttachDbFilename=|DataDirectory|mydbfile.mdf;
Database=dbname;Trusted_Connection=Yes;" 

(Note: use |DataDirectory| when your database file 
resides in the data directory)


SQL Native Client OLE DB Provider 


Standard security:

"Provider=SQLNCLI;
Server=UrServerName;
Database=pubs;
UID=myUsername;PWD=myPassword;" 

 

Trusted connection:

"Provider=SQLNCLI;
Server=UrServerName;
Database=pubs;
Trusted_Connection=yes;" 

Note: Integrated Security=SSPI equals 
Trusted_Connection=yes


Prompt for username and password:

oConn.Properties("Prompt") = adPromptAlways
oConn.Open "Provider=SQLNCLI;Server=Aron1;DataBase=pubs;" 

 

Enabling MARS (multiple active result sets):

"Provider=SQLNCLI;
Server=UrServerName;
Database=pubs;
Trusted_Connection=yes;
MarsConn=yes" 

Note: MarsConn=yes equals 
MultipleActiveResultSets=true equals 
MARS_Connection=yes


Encrypt data sent over network:

"Provider=SQLNCLI;
Server=UrServerName;
Database=pubs;
Trusted_Connection=yes;
Encrypt=yes" 

 

Attach a database file on connect to a local SQL 
Server Express instance:

"Provider=SQLNCLI;
Server=.\SQLExpress;
AttachDbFilename=c:\asd\qwe\mydbfile.mdf;
Database=dbname;
Trusted_Connection=Yes;" 

OR

"Provider=SQLNCLI;
Server=.\SQLExpress;
AttachDbFilename=|DataDirectory|mydbfile.mdf;
Database=dbname;
Trusted_Connection=Yes;" 

(Note: use |DataDirectory| when your database file 
resides in the data directory)

 

SqlConnection (.NET) 


Standard Security:

"Data Source=UrServerName;
Initial Catalog=pubs;
User Id=myUsername;
Password=myPassword;" 

OR

"Server=UrServerName;
Database=pubs;
User ID=myUsername;
Password=myPassword;
Trusted_Connection=False" 

 

Trusted Connection:

"Data Source=UrServerName;
Initial Catalog=pubs;
Integrated Security=SSPI;" 

OR

"Server=UrServerName;
Database=pubs;
Trusted_Connection=True;" 
  

(Note: use serverName\instanceName as Data Source to use 
an specifik SQLServer instance)

Connect via an IP address:

"Data Source=190.190.200.100,1433;
Network Library=DBMSSOCN;
Initial Catalog=pubs;
User ID=myUsername;
Password=myPassword;" 

(Note: DBMSSOCN=TCP/IP instead of Named Pipes, 
at the end of the Data Source is the port to use (1433 
is the default))

Enabling MARS (multiple active result sets):

"Server=UrServerName;
Database=pubs;
Trusted_Connection=True;
MultipleActiveResultSets=true" 

Note- Use ADO.NET 2.0 for MARS functionality. MARS is not 
supported in ADO.NET 1.0 nor ADO.NET 1.1


Attach a database file on connect to a local SQL Server 
Express instance:

"Server=.\SQLExpress;
AttachDbFilename=c:\asd\qwe\mydbfile.mdf;
Database=dbname;
Trusted_Connection=Yes;" 

OR

"Server=.\SQLExpress;
AttachDbFilename=|DataDirectory|mydbfile.mdf;
Database=dbname;
Trusted_Connection=Yes;" 

(Note: use |DataDirectory| when your database file resides 
in the data directory) 


Using "User Instance" on a local SQL Server Express 
instance:

"Data Source=.\SQLExpress;
integrated security=true;
attachdbfilename=|DataDirectory|\mydb.mdf;user instance=true;" 

Note: The "User Instance" functionality creates a new SQL 
Server instance on the fly during connect. This works 
only on a local SQL 
Server 2005 instance and only when connecting using windows
authentication over local named pipes. The purpose is to 
be able to create a full rights SQL Server instance to 
a user with limited administrative rights on the computer. 

To enable the functionality: sp_configure 
'user instances enabled','1' (0 to disable)
Using SQL Server 2005 Express? Don't miss the server name 
syntax: SERVERNAME\SQLEXPRESS (Substitute "SERVERNAME" with the name of the computer)

 

Context Connection - connecting to "self" from within your CLR stored prodedure/function 


C#:

using(SqlConnection connection = new SqlConnection("context connection=true"))
{
    connection.Open();
    // Use the connection
}

 

Visual Basic:

Using connection as new SqlConnection("context connection=true")
    connection.Open()
    ' Use the connection
End Using

 


The context connection lets you execute Transact-SQL statements
in the same context (connection) that your code was invoked in the first place

**************MY SQL****************
MyODBC 

MyODBC 2.50 Local database:

"Driver={mySQL};
Server=localhost;
Option=16834;
Database=mydatabase;" 

 

MyODBC 2.50 Remote database:

"Driver={mySQL};
Server=data.domain.com;
Port=3306;
Option=131072;
Stmt=;
Database=my-database;
Uid=myUsername;
Pwd=myPassword;" 


MyODBC 3.51 Local database:

"DRIVER={MySQL ODBC 3.51 Driver};
SERVER=localhost;
DATABASE=myDatabase;
USER=myUsername;
PASSWORD=myPassword;
OPTION=3;" 


MyODBC 3.51 Remote database:

"DRIVER={MySQL ODBC 3.51 Driver};
SERVER=data.domain.com;
PORT=3306;
DATABASE=myDatabase; 
USER=myUsername;
PASSWORD=myPassword;
OPTION=3;" 

 

OLE DB, OleDbConnection 

(.NET) 


Standard:

"Provider=MySQLProv;
Data Source=mydb;
User Id=myUsername;
Password=myPassword;" *Connector/Net 1.0 (.NET) 


Standard:

"Server=Server;
Database=Test;
Uid=myUsername;
Pwd=myPassword;" 

Specifying port:

"Server=Server;
Port=1234;
Database=Test;
Uid=myUsername;
Pwd=myPassword;" 

Note: Default port is 3306. 
Enter value -1 to use a named pipe connection. 

Declare the MySqlClient connection:

C#:

using MySql.Data.MySqlClient;
MySqlConnection oMySqlConn = new MySqlConnection();
oMySqlConn.ConnectionString = "Server=Server;" + 
"Database=Test;" +
"Uid=myUsername;Pwd=myPassword;";
oMySqlConn.Open(); 

 

VB.NET:

Imports MySql.Data.MySqlClient
Dim oMySqlConn As MySqlConnection = New _
                       MySqlConnection()
oMySqlConn.ConnectionString = "Server=Server;" &amp; _
Database=Test;Uid=myUsername;Pwd=myPassword;"
oMySqlConn.Open() 

 

MySqlConnection (.NET) 


eInfoDesigns.dbProvider:

"Data Source=server;
Database=mydb;
User ID=myUsername;
Password=pwd;
Command Logging=false" 

Note: This one is used with eInfoDesigns 
dbProvider, an add-on to .NET  Declare the 
MySqlConnection:

C#:

using eInfoDesigns.dbProvider.MySqlClient;
MySqlConnection oMySqlConn = new MySqlConnection();
oMySqlConn.ConnectionString = "my connection string";
oMySqlConn.Open(); 

 

VB.NET:

Imports eInfoDesigns.dbProvider.MySqlClient
Dim oMySqlConn As MySqlConnection = New MySqlConnection()
oMySqlConn.ConnectionString = "my connection string"
oMySqlConn.Open() 

 

SevenObjects MySqlClient (.NET) 


Standard:

"Host=server; 
UserName=myUsername; 
Password=mypassword;
Database=mydb;" 

Note: This is a freeware ADO.Net data provider from SevenObjects
Core Labs MySQLDirect (.NET) 


 

CoreLabs MySQLDirect (.NET) 

Standard:

"User ID=root; 
Password=pwd; 
Host=localhost; 
Port=3306; 
Database=test;
Direct=true; 
Protocol=TCP; 
Compress=false; 
Pooling=true; 
Min Pool Size=0;
Max Pool Size=100; 
Connection Lifetime=0" 

*************ORACLE************************

ODBC 

New version:

"Driver={Microsoft ODBC for Oracle};
Server=OracleServer.world;
Uid=myUsername;
Pwd=myPassword;" 


Old version:

"Driver={Microsoft ODBC Driver for Oracle};
ConnectString=OracleServer.world;
Uid=myUsername;
Pwd=myPassword;" 


OLE DB, OleDbConnection (.NET) 


Standard security:

"Provider=msdaora;
Data Source=MyOracleDB;
User Id=myUsername;
Password=myPassword;" 

This one is from Microsoft, the following 
are from Oracle

Standard Security:

"Provider=OraOLEDB.Oracle;
Data Source=MyOracleDB;
User Id=myUsername;
Password=myPassword;" 


Trusted Connection:

"Provider=OraOLEDB.Oracle;
Data Source=MyOracleDB;
OSAuthent=1;" 

 

OracleConnection (.NET) 

Standard:

"Data Source=MyOracleDB;
Integrated Security=yes;" 

Note: This one works only with Oracle 8i 
release 3 or later

Specifying username and password:

"Data Source=MyOracleDB;
User Id=myUsername;
Password=passwd;
Integrated Security=no;" 

Note: This one works only with Oracle 8i 
release 3 or later

Declare the OracleConnection:

C#:

using System.Data.OracleClient;
OracleConnection oOracleConn = new OracleConnection();
oOracleConn.ConnectionString = "my connection string";
oOracleConn.Open(); 


VB.NET:

Imports System.Data.OracleClient
Dim oOracleConn As OracleConnection = New OracleConnection()
oOracleConn.ConnectionString = "my connection string"
oOracleConn.Open() 

 

Core Labs OraDirect (.NET) 

Standard:
"User ID=scott; 
Password=tiger; 
Host=ora; 
Pooling=true; 
Min Pool Size=0;
Max Pool Size=100; 
Connection Lifetime=0" 

Data Shape 

MS Data Shape:
"Provider=MSDataShape.1;
Persist Security Info=False;
Data Provider=MSDAORA;
Data Source=orac;
user id=myUsername;
password=myPassword" </value>
  </data>
  <metadata name="$this.Locked" type="System.Boolean, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAUAICAQAAAAAADoAgAAVgAAADAwAAAAAAAAqA4AAD4DAAAgIAIAAAAAADABAADmEQAAEBAQAAAA
        AAAoAQAAFhMAACAgAAAAAAAAqAgAAD4UAAAoAAAAIAAAAEAAAAABAAQAAAAAAAACAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAgAAAgAAAAICAAIAAAACAAIAAgIAAAMDAwACAgIAAAAD/AAD/AAAA//8A/wAAAP8A
        /wD//wAA////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMzMzMzMzMzAAAAA
        AAAAAADMzMzMzMzMwAAAAAAAAAAAzMzMzMzMzMAAAAAAAAAAAMzMzMzMzMzAAAAAAAAAAADMzMzMzMzM
        wAAAAAAAAAAAzMzMzMzMzMAAAAAAAAAAAMzMzMzMzMzAAAAAAAAAAADMzMzMzMzMwAAAAAAAAAAAzMzM
        zMzMzMAAAAAAAAAAAMzMzMzMzMzAAAAAAACZAADMzMzMzMzMwAAAAAAACZmZAAAAAAAAAAAAAAAAAAmZ
        mZmZAAAAAAAAAAAAAAAAmZmZmZmZAAAAAAAAAAAAAJmZmZmZmZmQAAAAAAAAAAAJmZmZmZmZAAAAAAAA
        AAAAAJmZmZmZAAAAAAAAAAAAAACZmZmZAAAAAAAAAAAAAAAACZmZkAAAAAAAAAAAAAAAAAmZkAAAAAAA
        AAAAAAAAAAAAkAAAAAAAAAAAAAAAAAALu7u7u7AAAAAAAAAAAAC7u7u7u7u7uwAAAAAAAAALu7u7u7u7
        u7uwAAAAAAAAu7u7u7u7u7u7uwAAAAAAALu7u7u7u7u7u7sAAAAAAAALu7u7u7u7u7uwAAAAAAAAALu7
        u7u7u7u7AAAAAAAAAAAAC7u7u7uwAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////////////AAH//wAB//8
        AAf//AAH//wAB//8AAf//AAH//wAB//8AAf//AAH/zwAB/+D////gD///8AD///AAH//4AD///AD///w
        D///+B////h////9////4Af//wAA//4AAH/8AAA//AAAP/4AAH//AAD//+AH//////8oAAAAMAAAAGAA
        AAABAAgAAAAAAAAJAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAgAAAAICAAIAAAACAAIAAgIAAAMDA
        wACAgIAAAAD/AAD/AAAA//8A/wAAAP8A/wD//wAA////ADQJTwAAAAAAAAAAADQJAAAAAAEAAAKoAAAA
        AAA9NAAAiF//AAEAAAAIAAAACAAAALwuAADvBSwABBWfAAAAAAAAAHUA7wXIAIRzjwCWOooA7wUsABwV
        nwB6Eu8AKAAAADAAAAAwAAAAAQABAAAAAAAAAAAAAAAAAAAAAAACAAAAAAAAAAAAAAD///8AAIAAAACA
        gACAAAAAgACAAICAAADAwMAAgICAAAAA/wAA/wAAAP//AP8AAAD/AP8A//8AAP///wByAG0AgF/iAPe/
        NwAAAMUA978NAGcAZgAGwe4A+b/iAPe/NwAAAMUA97+gAAAACAAAADMA978DAAAABgBnAFgAcwAAAAAA
        AAAAAAAAcgB3APdGQQAAv9gA+EM6AAC/EQAAAAAAAAAQAAAA1ABYgXcA97/gAPy/2AD4v+AA/L8AAAAA
        QABxAAAAAAAAAAAAUwBnAAAAAAAUAHIA4wD3vyoAAAD/AP//QAAAABQAcgAAAGkAQABxAEoAZwAeAPe/
        NQBnAEwAVABAAHEAAAAAABgAAADHAPe/AABpAOgAdAAkAAAAAAAAAAAAAAAAAAAAAAAAAL4AZwCEAGcA
        xAD3vwMAAAB3APe/4AD8v5AA97/gAPy/yABnALsAZwAAAAAAZABnAAAAAAACAHIAoQAIAOIA9783AAAA
        xQD3vw0AZwBmAAbB7gD5v+IA9783AAAAxQD3v6AAAAAIAAAAMwD3vwMAAADIAGcA4AB0AAAAAAAAAAAA
        AAByAJkAIUZBAAAAUABnQzoAAACkAGcAGgAAAAAAAADkAP9/nwAhEDwAIRAKAAAAUABnAAwAZwCkAGcA
        4gApUMQAZwAAAAAALgAAAOgAWoH4ACdQ/wD//+YA//8uAAAAYQAAAEwAZwDcAPe/AAAAAAAAAAAvAAAA
        tAAAAPAAcgAYAAAAxwD3vwAAaQAIAHIAtAAAAAAAAADwAHIAAABpAAAAAAAYAACgAABpAOQABsEoAPe/
        MABYgQAAAACZAPe/AABpAAAAAAD8AGcAAAAAAAAAaQAAAAAAJgAAADYA+L8AAGkAGAAAAAAAAAARAAAA
        WwAhEAAAaQAAAAAAEQAAABkAIRARAAAAlQCBXwQAAABYAHIAAABpAOQABsEoAPe/MABYgQAAAAB9APe/
        AABpAAAAAACEAGcABgBnAHQAZwAAAAAAAAAAAAAAAACQAGcAVABnAMQA978cAAAAdwD3v+AA/L/gAAAB
        2AAAACYAPn8XAEF/2AABAC8AaI7XABcBXAAvAeAAAAHYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAwMDAwMDAwM
        DAwMDAwMDAwMDAwMDAwMDAwMDAwAAAAAAAAAAAAAAAAAAAAAAAAADAwMDAwMDAwMDAwMDAwMDAwMDAwM
        DAwMDAwMDAwAAAAAAAAAAAAAAAAAAAAAAAAADAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwAAAAA
        AAAAAAAAAAAAAAAAAAAADAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwAAAAAAAAAAAAAAAAAAAAA
        AAAADAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwAAAAAAAAAAAAAAAAAAAAAAAAADAwMDAwMDAwM
        DAwMDAwMDAwMDAwMDAwMDAwMDAwAAAAAAAAAAAAAAAAAAAAAAAAADAwMDAwMDAwMDAwMDAwMDAwMDAwM
        DAwMDAwMDAwAAAAAAAAAAAAAAAAAAAAAAAAADAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwAAAAA
        AAAAAAAAAAAAAAAAAAAADAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwAAAAAAAAAAAAAAAAAAAAA
        AAAADAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwAAAAAAAAAAAAAAAAAAAAAAAAADAwMDAwMDAwM
        DAwMDAwMDAwMDAwMDAwMDAwMDAwAAAAAAAAAAAAAAAAAAAAAAAAADAwMDAwMDAwMDAwMDAwMDAwMDAwM
        DAwMDAwMDAwAAAAAAAAAAAAAAAAAAAAAAAAADAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwAAAAA
        AAAAAAAAAAAJCQkJAAAADAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwAAAAAAAAAAAAAAAAACQkJ
        CQkJCQkJAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACQkJCQkJCQkJCQkJCQkJ
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAkJCQkJCQkJCQkJCQkJCQkJCQkJCQAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJAAAAAAAAAAAAAAAAAAAAAAAA
        CQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkAAAAAAAAAAAAAAAAAAAAAAAAACQkJCQkJCQkJCQkJ
        CQkJCQkJCQkJCQkJCQkJAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJ
        CQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJCQkJCQkJCQkJCQkJCQkJCQkJCQkAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAJCQkJCQkJCQkJCQkJCQkJCQkJAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAACQkJCQkJCQkJCQkJCQkJCQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAkJCQkJCQkJ
        CQkJCQkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAkJCQkJCQkJCQkJAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJCQkJCQkJCQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAJCQkJCQkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAJCQkJCQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACwsLCwsLCwsLCwsL
        CwsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALCwsLCwsLCwsLCwsLCwsLCwsLCwsLAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAACwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsAAAAAAAAAAAAAAAAAAAAA
        AAAAAAsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwAAAAAAAAAAAAAAAAAAAAAACwsLCwsLCwsL
        CwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsAAAAAAAAAAAAAAAAAAAAACwsLCwsLCwsLCwsLCwsLCwsLCwsL
        CwsLCwsLCwsLCwsAAAAAAAAAAAAAAAAAAAAACwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsA
        AAAAAAAAAAAAAAAAAAAACwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsAAAAAAAAAAAAAAAAA
        AAAAAAsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwAAAAAAAAAAAAAAAAAAAAAAAAAACwsLCwsL
        CwsLCwsLCwsLCwsLCwsLCwsLCwsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALCwsLCwsLCwsLCwsLCwsL
        CwsLCwsLAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACwsLCwsLCwsLCwsLCwsAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//
        /////wAA////////AAD///////8AAP///////wAA////////AAD//4AAAAMAAP//gAAAAwAA//+AAAAD
        AAD//4AAAAMAAP//gAAAAwAA//+AAAADAAD//4AAAAMAAP//gAAAAwAA//+AAAADAAD//4AAAAMAAP//
        gAAAAwAA//+AAAADAAD//4AAAAMAAP/DgAAAAwAA/+AP////AAD/4AA///8AAP/wAAB//wAA//gAAAH/
        AAD/+AAAAA8AAP/8AAAAHwAA//wAAAB/AAD//gAAAf8AAP//AAAH/wAA//8AAB//AAD//4AAf/8AAP//
        wAH//wAA///AB///AAD//+Af//8AAP//4H///wAA///g////AAD//AAP//8AAP/AAAD//wAA/wAAAD//
        AAD8AAAAD/8AAPgAAAAH/wAA+AAAAAf/AAD4AAAAB/8AAPgAAAAH/wAA/AAAAA//AAD/AAAAP/8AAP/A
        AAD//wAA//wAD///AAD///////8AACgAAAAgAAAAQAAAAAEAAQAAAAAAgAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAA////AAAREREAKqqqAEVFRQAqqqoAERERACqqqgBVVVUAKqqqABEREQAqqqoAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPAAAPH+AAfz/4AP///AH///4D////A////wP///8D////Af/
        //gD///wAf//4AB//4AAD/wA/4AAAP+AAAD/gAAA/4AAAP+AAAD/gAAA/4AAAP+AAAD/gAAA/4AAAPgA
        ///8AAAP/gAAH/8AAH//gAD//8AD///AB///4A////AD//+AAH/+AAAf/AAAD/gAAAfwAAAD8AAAA/AA
        AAPwAAAD+AAAB/wAAA/+AAAf/4AAf//wA/8oAAAAEAAAACAAAAABAAQAAAAAAIAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAgAAAgAAAAICAAIAAAACAAIAAgIAAAMDAwACAgIAAAAD/AAD/AAAA//8A/wAAAP8A
        /wD//wAA////AAAADMzMzMzAAAAMzMzMzMAAAAzMzMzMwAAADMzMzMzAAAAMzMzMzMAAmQzMzMzMwAAJ
        mZAAAAAAAACZmZkAAAAAAAmZmZmQAAAACZmZmZmQAAAAmZmZkAAAAACZkAAAAAALu7u7u7AAALu7u7u7
        uwAAu7u7u7u7AAALu7u7u7AA+AG7u/gBu7v4AQAA+AEAC/gBu7vIAbu74f8AAPA/AAD4B7u7+AG7u/wH
        AAD8fwAA4Ae7u8ADsADAAwAA4AcAACgAAAAgAAAAQAAAAAEACAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAACAAACAAAAAgIAAgAAAAIAAgACAgAAAwMDAAICAgAAAAP8AAP8AAAD//wD/AAAA/wD/AP//
        AAD///8ANAlPAAAAAAAAAAAANAkAAAYADAAvAagAAAAAAD00AACgjZcAAQAAAAQAAAAEAAAAvC4AAO8F
        JAAEFZ8AAAAAAAAAdQDvBcAAhHOPAM4+igDvBSQAHBWfAG4S7wAoAAAAIAAAACAAAAABAAEAAAAAAAAA
        AAAAAAAAAAAAAAIAAAAAAAAAAAAAAP///wAAgAAAAICAAIAAAACAAIAAgIAAAMDAwACAgIAAAAD/AAD/
        AAAA//8A/wAAAP8A/wD//wAA////AGcAFgCAXwAAao4qAH8XAAD4BgIACg4ZALRaAgB/DuwAAAAGAGcA
        PAAAAAEA7I4AADJRSQC0Wr4AgI7aAH8XAAD4BgIACg4ZALRaAgDfRpwAIA+nAAAA+AACAAoAGQC8AAYA
        ZwDsjgAAvxa4AIEDpwABAAAA+AYCAAoOGQC0WgIAo0Z/AIYD7AAjNd8AAQAAAPgGAgAKDhkAvAWjAH8X
        vAAZAAoAAAD4AAIAvgAAAAIAAoAAAAUAGADfFtYA9783AAAA0ABAAPQAagBEAPe/kABnANgAcgDYAHIA
        LABnAHAAgF8CABqAvAAAADQAAAAKAAAA+AAAANgAcgBUAGcACgCAXyIAgF+QAGcAVABnAJUAgV//AP//
        YABnAAkAgF/UAGcA7ABnAA8AgV//AP//+ABnAGQAgF9YACZQ2AByANgAcgDEAEUAcQCAXwMAAAAAAAAA
        mABVAEAAZwC9APe/AACIXwEAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAHgARQAAAIhfAAAAAAAAAAAAAAAAvgAAAHoAgl8QAGcADQCBX/8A//8cAGcA
        bQCAXxkAAAAAAAAAcABnABgAZwDYAHIAGQAAAL4AAAA8AGcAfwCAXxkAAAAAAAAAcABnAAAAAADYAHIA
        vgAAAFgAZwDRAABQGQAAAAAAAABwAGcA2AByAHoAgF98AGcAFQCAXxkAAAAAAAAAcABnAIgAiF/4AAAA
        CgAAAAIAAAAcAGcAoQCAXwoAAAD4AAAAWAAmUNgANhhOAAYAGADZPgAAIAAFAL8W0gA2GGIABgAsANk+
        AAAgAAUAvxbmAG1DpwAAAAAAKhK/ALRaAgAAAHIAAAAZAAAAAAAAACEAgF/8AGcAbAByANgAFoEqAH8X
        AAA8DwEAKhIZALRaAgB/DpgAAAAGAHIAMgBtQ+AAAAHYAAAAHgA+fxcAQX/YAAEALwBggdcAFwFcAC8B
        4AAAAdgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAMDAwMDAwMDAwMDAwMDAwMDAwMDAwMAAAAAAAAAAAAAAwMDAwMDAwM
        DAwMDAwMDAwMDAwMDAwAAAAAAAAAAAAADAwMDAwMDAwMDAwMDAwMDAwMDAwMDAAAAAAAAAAAAAAMDAwM
        DAwMDAwMDAwMDAwMDAwMDAwMAAAAAAAAAAAAAAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwAAAAAAAAAAAAA
        DAwMDAwMDAwMDAwMDAwMDAwMDAwMDAAAAAAAAAAAAAAMDAwMDAwMDAwMDAwMDAwMDAwMDAwMAAAAAAAA
        AAAAAAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwAAAAAAAAAAAAADAwMDAwMDAwMDAwMDAwMDAwMDAwMDAAA
        AAAAAAAAAAAMDAwMDAwMDAwMDAwMDAwMDAwMDAwMAAAACQkJCQkAAAwMDAwMDAwMDAwMDAwMDAwMDAwM
        DAwAAAAACQkJCQkJCQkJCQkJCQAAAAAAAAAAAAAAAAAAAAAAAAAACQkJCQkJCQkJCQkJCQkJCQkJCQkJ
        AAAAAAAAAAAAAAAJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQAAAAAAAAAJCQkJCQkJCQkJCQkJCQkJ
        CQkJCQkJCQAAAAAAAAAAAAAJCQkJCQkJCQkJCQkJCQkJCQkJCQAAAAAAAAAAAAAAAAAJCQkJCQkJCQkJ
        CQkJCQkJCQAAAAAAAAAAAAAAAAAAAAAJCQkJCQkJCQkJCQkJCQAAAAAAAAAAAAAAAAAAAAAAAAAJCQkJ
        CQkJCQkJAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAkJCQkJCQkJAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAkJCQkJAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAkJAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAALCwsLCwsLCwsLCwsLCwsLCwsAAAAAAAAAAAAACwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsAAAAA
        CwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLAAsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsL
        CwsAAAsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwAAAAALCwsLCwsLCwsLCwsLCwsLCwsLCwsL
        CwsLCwAAAAAAAAAAAAALCwsLCwsLCwsLCwsLCwsLCwsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAP///////////8AAAP/AAAD/wAAA/8AAAP/AAAD/wAAA/8AAAP/AAAD/wAAA/8AAAODA
        AADwAH//+AAAP/gAAAH8AAAH/gAAH/8AAH//gAH//8AP///AP///4P////P///8AAD/wAAADwAAAAIAA
        AADAAAAA8AAAA/8AAD//////
</value>
  </data>
</root>